
import cv2
import numpy as np
import cv2
import os
from keras.layers import Dense, Flatten
from keras.layers import Dropout
from keras.layers.convolutional import Conv2D,MaxPooling2D
from keras.layers.core import flatten
from keras.models import Sequential
from keras.optimizer_v1 import Adam
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from keras.utils.np_utils import to_categorical

img1 = cv2.imread('ImageQuery/fre.lon.png',0)
#img2 = cv2.imread('ImageTrain/frelonts.jpg',0)
img2 = cv2.imread('ImageTrain/frelonts.jpg',0)

orb = cv2.ORB_create(nfeatures=10000)
kp1, ds1 = orb.detectAndCompute(img1,None)
kp2, ds2 = orb.detectAndCompute(img2,None)
#imgkp1 = cv2.drawKeypoints(img1,kp1,None)
#imgkp2 = cv2.drawKeypoints(img2,kp2,None)

classNames = []
mylist = os.listdir(path)
print('total Classes Detected', len(mylist))
for cl in mylist:
    imgCur = cv2.imread(f'{path}/{cl}', 0)
    images.append(imgCur)
    classNames.append(os.path.splitext(cl)[0])
print(classNames)

bf = cv2.BFMatcher()
matchers = bf.knnMatch(ds1,ds2,k=2)

good = []
for m,n in matchers:
    if m.distance< 0.75*n.distance:
        good.append([m])

print(len(good))
img3 = cv2.drawMatchesKnn(img1,kp1,img2,kp2,good,None,flags=2)


#cv2.imshow('kp1',imgkp1)
#cv2.imshow('kp2',imgkp2)


cv2.imshow('img1',img1)
cv2.imshow('img2',img2)
cv2.imshow('img3',img3)
cv2.waitKey(0)

